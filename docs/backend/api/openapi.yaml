openapi: 3.0.3
info:
  title: BuildBridge AI Backend API
  version: 1.0.0
  description: REST API for BuildBridge AI
servers:
  - url: https://api.buildbridge.ai/v1
  - url: http://localhost:3000/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: object
        correlationId:
          type: string
      required: [code, message]
    User:
      type: object
      properties:
        id: { type: string, format: uuid }
        email: { type: string, format: email }
        name: { type: string }
        role: { type: string, enum: [admin, manager, vendor, client] }
      required: [id, email, role]
    Project:
      type: object
      properties:
        id: { type: string, format: uuid }
        name: { type: string }
        status: { type: string, enum: [in_progress, on_track, delayed, completed] }
        budget: { type: number }
      required: [id, name, status]
security:
  - bearerAuth: []
paths:
  /health:
    get:
      summary: Liveness check
      security: []
      responses:
        '200':
          description: OK
  /auth/login:
    post:
      summary: Login and retrieve JWT tokens
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, minLength: 6 }
              required: [email, password]
      responses:
        '200':
          description: Tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken: { type: string }
                  refreshToken: { type: string }
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
  /users/me:
    get:
      summary: Get current user
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        '401':
          description: Unauthorized
  /projects:
    get:
      summary: List projects
      parameters:
        - in: query
          name: status
          schema: { type: string }
      responses:
        '200':
          description: Projects
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Project' }
    post:
      summary: Create project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string }
                budget: { type: number }
              required: [name]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
        '400':
          description: Validation error
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Error' }
